define(["require", "exports", "tslib", "@uifabric/utilities/lib/GlobalSettings", "./DefaultFontStyles", "./DefaultPalette", "@microsoft/load-themed-styles"], function (require, exports, tslib_1, GlobalSettings_1, DefaultFontStyles_1, DefaultPalette_1, load_themed_styles_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _theme = {
        palette: DefaultPalette_1.DefaultPalette,
        semanticColors: _makeSemanticColorsFromPalette(DefaultPalette_1.DefaultPalette),
        fonts: DefaultFontStyles_1.DefaultFontStyles
    };
    exports.ThemeSettingName = 'theme';
    var win = typeof window !== 'undefined' ? window : undefined;
    // tslint:disable:no-string-literal no-any
    if (win && win['FabricConfig'] && win['FabricConfig'].theme) {
        _theme = createTheme(win['FabricConfig'].theme);
    }
    // tslint:enable:no-string-literal no-any
    // Set the default theme.
    GlobalSettings_1.GlobalSettings.setValue(exports.ThemeSettingName, _theme);
    /**
     * Gets the theme object.
     */
    function getTheme() {
        return _theme;
    }
    exports.getTheme = getTheme;
    /**
     * Applies the theme, while filling in missing slots.
     */
    function loadTheme(theme) {
        _theme = createTheme(theme);
        // Load the legacy theme from the palette.
        load_themed_styles_1.loadTheme(_theme.palette);
        GlobalSettings_1.GlobalSettings.setValue(exports.ThemeSettingName, _theme);
        return _theme;
    }
    exports.loadTheme = loadTheme;
    /**
     * Creates a custom theme definition which can be used with the Customizer.
     */
    function createTheme(theme) {
        var newPalette = tslib_1.__assign({}, DefaultPalette_1.DefaultPalette, theme.palette);
        return {
            palette: newPalette,
            fonts: tslib_1.__assign({}, DefaultFontStyles_1.DefaultFontStyles, theme.fonts),
            semanticColors: tslib_1.__assign({}, _makeSemanticColorsFromPalette(newPalette), theme.semanticColors)
        };
    }
    exports.createTheme = createTheme;
    // Generates all the semantic slot colors based on the Fabric palette.
    // We'll use these as fallbacks for semantic slots that the passed in theme did not define.
    function _makeSemanticColorsFromPalette(p) {
        return {
            bodyBackground: p.white,
            bodyText: p.neutralPrimary,
            bodySubtext: p.neutralSecondary,
            bodyDivider: p.neutralLight,
            disabledBackground: p.neutralLighter,
            disabledText: p.neutralTertiaryAlt,
            disabledSubtext: p.neutralQuaternary,
            focusBorder: p.black,
            errorBackground: '#fde7e9',
            errorText: p.redDark,
            inputBorder: p.neutralTertiary,
            inputBorderHovered: p.neutralPrimary,
            inputBackgroundChecked: p.themePrimary,
            inputBackgroundCheckedHovered: p.themeDarkAlt,
            inputForegroundChecked: p.white,
            inputFocusBorderAlt: p.themePrimary,
            menuItemBackgroundHovered: p.neutralLighter,
            menuItemBackgroundChecked: p.neutralQuaternaryAlt,
            menuIcon: p.themePrimary,
            menuHeader: p.themePrimary,
            listBackground: p.white,
            listTextColor: p.neutralPrimary,
            listItemBackgroundHovered: p.neutralLighter,
            listItemBackgroundChecked: p.neutralQuaternary,
            listItemBackgroundCheckedHovered: p.neutralQuaternaryAlt
        };
    }
});

//# sourceMappingURL=theme.js.map
