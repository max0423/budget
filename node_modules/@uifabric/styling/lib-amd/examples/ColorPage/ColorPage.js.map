{"version":3,"sources":["examples/ColorPage/ColorPage.tsx"],"names":[],"mappings":";;;IAaA,IAAM,OAAO,GAAc;QACzB;YACE,GAAG,EAAE,MAAM;YACX,IAAI,EAAE,MAAM;YACZ,SAAS,EAAE,MAAM;YACjB,QAAQ,EAAE,GAAG;YACb,QAAQ,EAAE,GAAG;SACd;QACD;YACE,GAAG,EAAE,YAAY;YACjB,IAAI,EAAE,aAAa;YACnB,SAAS,EAAE,YAAY;YACvB,QAAQ,EAAE,GAAG;YACb,QAAQ,EAAE,GAAG;SACd;QACD;YACE,GAAG,EAAE,SAAS;YACd,IAAI,EAAE,SAAS;YACf,SAAS,EAAE,SAAS;YACpB,QAAQ,EAAE,GAAG;YACb,QAAQ,EAAE,GAAG;SACd;KACF,CAAC;IAQF;QAA+B,qCAAqB;QAClD;YAAA,YACE,iBAAO,SAGR;YADC,KAAI,CAAC,KAAK,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;QACjC,CAAC;QACM,0BAAM,GAAb;YACE,IAAM,KAAK,GAAiB,EAAE,CAAC;YAC/B,IAAM,KAAK,GAAW,kBAAQ,EAAE,CAAC;YACjC,IAAM,MAAM,GAAqB,4BAAS,EAAE,CAAC;YAE7C,MAAM,CAAC,IAAI,CAAC,wBAAc,CAAC,CAAC,OAAO,CAAC,UAAC,SAAiB;gBACpD,kCAAkC;gBAClC,IAAM,UAAU,GAAY,KAAK,CAAC,OAAe,CAAC,SAAS,CAAC,CAAC;gBAE7D,CAAC,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE,iBAAiB,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,MAAc;oBAC7F,KAAK,CAAC,IAAI,CAAC;wBACT,GAAG,EAAE,MAAM,GAAG,KAAK,CAAC,MAAM;wBAC1B,IAAI,EAAE,SAAS,GAAG,MAAM;wBACxB,UAAU,YAAA;qBACX,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,CACL,oBAAC,WAAI;gBACH,oBAAC,uBAAU,IAAC,IAAI,EAAC,QAAQ,GAAG;gBAC5B,oBAAC,yBAAW,IACV,KAAK,EAAG,KAAK,EACb,OAAO,EAAG,OAAO,EACjB,kBAAkB,EAAG,UAAC,IAAgB,EAAE,KAAa,EAAE,MAAe,IAAkB,OAAA,CACtF,6BAAK,SAAS,EAAG,MAAM,CAAC,IAAc,IAClC,MAAM,CAAC,SAAS,KAAK,YAAY,GAAG,CACpC;wBACE,6BAAK,SAAS,EAAG,MAAM,CAAC,MAAgB,EAAG,KAAK,EAAG,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,GAAK;wBACvF,6BAAK,SAAS,EAAG,MAAM,CAAC,UAAoB,IAAK,IAAI,CAAC,UAAU,CAAQ,CACpE,CACP;wBACC,MAAM,CAAC,GAAG,KAAK,SAAS,GAAG,CACzB,6BACE,SAAS;4BACP,kCAAkC;4BACjC,yBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;gCACnC,GAAG;gCACH,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,cAAc,GAAG,EAAE,CAAC,mDAI7D,CACP,GAAG;wBACA,kCAAkC;wBAClC,iCAAQ,IAAY,CAAC,MAAM,CAAC,SAAS,CAAC,CAAQ,CAC/C,CACD,CACP,EAxBuF,CAwBvF,GAED,CACI,CACT,CAAC;QACJ,CAAC;QACH,gBAAC;IAAD,CA5DA,AA4DC,CA5D8B,yBAAa,GA4D3C;IA5DY,8BAAS","file":"examples/ColorPage/ColorPage.js","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent } from '@uifabric/utilities';\r\nimport {\r\n  DefaultPalette,\r\n  ColorClassNames,\r\n  ITheme,\r\n  getTheme\r\n} from '@uifabric/styling';\r\nimport { DetailsList, IColumn } from 'office-ui-fabric-react/lib/DetailsList';\r\nimport { Page } from '../Page/Page';\r\nimport { PageHeader } from '../PageHeader/PageHeader';\r\nimport { IColorPageStyles, getStyles } from './ColorPage.styles';\r\n\r\nconst COLUMNS: IColumn[] = [\r\n  {\r\n    key: 'name',\r\n    name: 'Name',\r\n    fieldName: 'name',\r\n    minWidth: 200,\r\n    maxWidth: 300\r\n  },\r\n  {\r\n    key: 'colorValue',\r\n    name: 'Color value',\r\n    fieldName: 'colorValue',\r\n    minWidth: 100,\r\n    maxWidth: 200\r\n  },\r\n  {\r\n    key: 'example',\r\n    name: 'Example',\r\n    fieldName: 'example',\r\n    minWidth: 300,\r\n    maxWidth: 400\r\n  }\r\n];\r\n\r\nexport interface IColorItem {\r\n  key: string;\r\n  colorValue: string;\r\n  name: string;\r\n}\r\n\r\nexport class ColorPage extends BaseComponent<{}, {}> {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = { details: null };\r\n  }\r\n  public render(): JSX.Element {\r\n    const items: IColorItem[] = [];\r\n    const theme: ITheme = getTheme();\r\n    const styles: IColorPageStyles = getStyles();\r\n\r\n    Object.keys(DefaultPalette).forEach((colorName: string) => {\r\n      // tslint:disable-next-line:no-any\r\n      const colorValue: string = (theme.palette as any)[colorName];\r\n\r\n      ['', 'Hover', 'Background', 'BackgroundHover', 'Border', 'BorderHover'].forEach((suffix: string) => {\r\n        items.push({\r\n          key: 'item' + items.length,\r\n          name: colorName + suffix,\r\n          colorValue\r\n        });\r\n      });\r\n    });\r\n\r\n    return (\r\n      <Page>\r\n        <PageHeader text='Colors' />\r\n        <DetailsList\r\n          items={ items }\r\n          columns={ COLUMNS }\r\n          onRenderItemColumn={ (item: IColorItem, index: number, column: IColumn): JSX.Element => (\r\n            <div className={ styles.cell as string }>\r\n              { column.fieldName === 'colorValue' ? (\r\n                <div>\r\n                  <div className={ styles.swatch as string } style={ { background: item.colorValue } } />\r\n                  <div className={ styles.swatchText as string }>{ item.colorValue }</div>\r\n                </div>\r\n              ) :\r\n                column.key === 'example' ? (\r\n                  <div\r\n                    className={\r\n                      // tslint:disable-next-line:no-any\r\n                      (ColorClassNames as any)[item.name] +\r\n                      ' ' +\r\n                      (item.name.indexOf('Border') >= 0 ? styles.cellWithBorder : '')\r\n                    }\r\n                  >\r\n                    The quick brown fox jumps over the lazy dog.\r\n                  </div>\r\n                ) : (\r\n                    // tslint:disable-next-line:no-any\r\n                    <div>{ (item as any)[column.fieldName] }</div>\r\n                  ) }\r\n            </div>\r\n          )\r\n          }\r\n        />\r\n      </Page >\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}