{"version":3,"sources":["examples/IconPage/IconPage.tsx"],"names":[],"mappings":";;;IAcA;QAA8B,oCAAiC;QAC7D;YAAA,YACE,iBAAO,SAKR;YAqBO,qBAAe,GAAG,UAAC,KAAa;gBACtC,IAAI,SAAS,GAAa,MAAM,CAAC,IAAI,CAAC,mBAAS,CAAC,CAAC;gBAEjD,KAAK,GAAG,KAAK,CAAC,iBAAiB,EAAE,CAAC;gBAElC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,UAAC,IAAY,IAAK,OAAA,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAA5C,CAA4C,CAAC,CAAC;gBAC/F,CAAC;gBACD,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;YAC/B,CAAC,CAAA;YAjCC,KAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,mBAAS,CAAC;aAClC,CAAC;;QACJ,CAAC;QAEM,yBAAM,GAAb;YACU,IAAA,gCAAS,CAAgC;YACjD,IAAM,MAAM,GAAoB,2BAAS,EAAE,CAAC;YAE5C,MAAM,CAAC,CACL,oBAAC,WAAI;gBACH,oBAAC,uBAAU,IAAC,IAAI,EAAC,OAAO,GAAG;gBAC3B,oBAAC,qBAAS,IAAC,SAAS,EAAC,iBAAiB,EAAC,QAAQ,EAAG,IAAI,CAAC,eAAe,GAAK;gBAC3E,oBAAC,qBAAS;oBACR,6BAAK,SAAS,EAAG,MAAM,CAAC,SAAmB,IACvC,SAAS,CAAC,GAAG,CAAC,UAAC,QAAgB,IAAK,OAAA,CACpC,oBAAC,mBAAQ,IAAC,GAAG,EAAG,QAAQ,EAAG,QAAQ,EAAG,QAAQ,uBAAuB,IAAI,GAAK,CAC/E,EAFqC,CAErC,CAAC,CACE,CACI,CACP,CACR,CAAC;QACJ,CAAC;QAYH,eAAC;IAAD,CAtCA,AAsCC,CAtC6B,yBAAa,GAsC1C;IAtCY,4BAAQ","file":"examples/IconPage/IconPage.js","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent } from '@uifabric/utilities';\r\nimport { IconCodes } from '@uifabric/styling';\r\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox';\r\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\r\nimport { Page } from '../Page/Page';\r\nimport { PageHeader } from '../PageHeader/PageHeader';\r\nimport { IconTile } from '../IconTile/IconTile';\r\nimport { IIconPageStyles, getStyles } from './IconPage.styles';\r\n\r\nexport interface IIconPageState {\r\n  iconNames: string[];\r\n}\r\n\r\nexport class IconPage extends BaseComponent<{}, IIconPageState> {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      iconNames: Object.keys(IconCodes)\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { iconNames }: IIconPageState = this.state;\r\n    const styles: IIconPageStyles = getStyles();\r\n\r\n    return (\r\n      <Page>\r\n        <PageHeader text='Icons' />\r\n        <SearchBox labelText='Filter icons...' onChange={ this._onSearchChange } />\r\n        <FocusZone>\r\n          <div className={ styles.container as string }>\r\n            { iconNames.map((iconName: string) => (\r\n              <IconTile key={ iconName } iconName={ iconName } data-is-focusable={ true } />\r\n            )) }\r\n          </div>\r\n        </FocusZone>\r\n      </Page>\r\n    );\r\n  }\r\n\r\n  private _onSearchChange = (value: string): void => {\r\n    let iconNames: string[] = Object.keys(IconCodes);\r\n\r\n    value = value.toLocaleLowerCase();\r\n\r\n    if (value) {\r\n      iconNames = iconNames.filter((name: string) => name.toLocaleLowerCase().indexOf(value) >= 0);\r\n    }\r\n    this.setState({ iconNames });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}