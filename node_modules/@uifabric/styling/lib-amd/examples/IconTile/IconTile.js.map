{"version":3,"sources":["examples/IconTile/IconTile.tsx"],"names":[],"mappings":";;;IASA,kBAAyB,KAAqB;QACpC,IAAA,yBAAQ,EAAE,yBAAQ,EAAE,0DAAW,CAA2B;QAClE,IAAM,MAAM,GAAoB,2BAAS,EAAE,CAAC;QAE5C,MAAM,CAAC;QACL,wBAAwB;QACxB,8CAAK,SAAS,EAAG,MAAM,CAAC,QAAkB,IAAQ,QAAQ;YACxD,2BAAG,SAAS,EAAI,wBAAsB,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,IAAI,GAAK;YACzE,iCAAO,QAAQ,CAAQ,CACnB,CAEP,CAAC;IACJ,CAAC;IAZD,4BAYC","file":"examples/IconTile/IconTile.js","sourcesContent":["import * as React from 'react';\r\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox';\r\nimport { IconClassNames } from '@uifabric/styling';\r\nimport { IIconTileStyles, getStyles } from './IconTile.styles';\r\n\r\nexport interface IIconTileProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  iconName: string;\r\n}\r\n\r\nexport function IconTile(props: IIconTileProps): JSX.Element {\r\n  const { iconName, children, ...divProps }: IIconTileProps = props;\r\n  const styles: IIconTileStyles = getStyles();\r\n\r\n  return (\r\n    // tslint:disable:no-any\r\n    <div className={ styles.iconTile as string } { ...divProps }>\r\n      <i className={ (IconClassNames as any)[iconName] + ' ' + styles.icon } />\r\n      <div>{ iconName }</div>\r\n    </div>\r\n    // tslint:enable:no-any\r\n  );\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}