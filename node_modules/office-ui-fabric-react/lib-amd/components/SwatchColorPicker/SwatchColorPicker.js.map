{"version":3,"sources":["components/SwatchColorPicker/SwatchColorPicker.tsx"],"names":[],"mappings":";;;IAoBA,IAAM,MAAM,GAAQ,YAAY,CAAC;IAiEjC,IAAM,uBAAuB,GAC3B,UAAC,KAAoC;QAEjC,IAAA,iBAAI,EACJ,aAAE,EACF,yBAAQ,EACR,uBAAO,EACP,2BAAS,EACT,iBAAI,EACJ,mCAAa,EACb,yBAAQ,EACR,2BAAS,EACT,uBAAO,EACP,uBAAO,EACP,uBAAO,CACC;QACV,MAAM,CAAC,CACL,oBAAC,sBAAa,uBACP,IAAI,CAAC,mBAAmB,IAC7B,EAAE,EAAG,EAAE,GAAG,OAAO,GAAG,IAAI,CAAC,KAAK,gBACjB,IAAI,CAAC,KAAK,uBACH,IAAI,mBACR,QAAQ,IAAI,QAAQ,kBACrB,OAAO,IAAI,OAAO,EACjC,QAAQ,EAAG,QAAQ,EACnB,SAAS,EAAG,eAAG,CAAC,SAAS;gBAErB,GAAC,cAAc,GAAG,MAAM,CAAC,cAAc,IAAG,CAAC,aAAa,IAAI,aAAa,KAAK,IAAI,CAAC,KAAK,CAAC;gBACzF,GAAC,cAAc,GAAG,MAAM,CAAC,QAAQ,IAAG,QAAQ;oBAE/C,EACD,OAAO,EAAG,QAAQ,EAClB,YAAY,EAAG,aAAa,EAC5B,YAAY,EAAG,aAAa,EAC5B,OAAO,EAAG,QAAQ,EAClB,IAAI,EAAG,IAAI,mBACK,aAAa,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAC1E,SAAS,EAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EACpC,KAAK,EAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAE9B,eAAe,EAAE,CACL,CACjB,CAAC;QAEF;YACE,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzB,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;QACH,CAAC;QAED;YACE,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzB,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QAED;YACE,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzB,OAAO,EAAE,CAAC;YACZ,CAAC;QACH,CAAC;QAED;YACE,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzB,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QAED;;;WAGG;QACH;YAEE,wCAAwC;YACxC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,mDAAyB,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,8BAAM,SAAS,EAAG,MAAM,CAAC,QAAQ,IAAM,IAAI,CAAC,KAAK,CAAS,CAAC;YACpE,CAAC;YAED,sEAAsE;YACtE,MAAM,CAAC,CACL,6BAAK,SAAS,EAAG,eAAG,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,EAAE,SAAS,KAAK,QAAQ,GAAG,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,EAAG,OAAO,EAAC,WAAW,EAAC,IAAI,EAAG,2BAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAEpJ,SAAS,KAAK,QAAQ;gBACpB,gCAAQ,EAAE,EAAC,KAAK,EAAC,EAAE,EAAC,KAAK,EAAC,CAAC,EAAC,KAAK,GAAG;gBACpC,8BAAM,KAAK,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,GAAG,CAEnC,CACP,CAAC;QACJ,CAAC;;IACH,CAAC,CAAC;IAOJ;QAAuC,6CAA+D;QAYpG,2BAAY,KAA8B;YAA1C,YACE,kBAAM,KAAK,CAAC,SAQb;YANC,KAAI,CAAC,GAAG,GAAG,KAAK,CAAC,EAAE,IAAI,iBAAK,CAAC,mBAAmB,CAAC,CAAC;YAElD,KAAI,CAAC,KAAK,GAAG;gBACX,aAAa,EAAE,KAAK,CAAC,UAAU,IAAI,KAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,UAAU,CAAC;gBACzG,QAAQ,EAAE,KAAK;aAChB,CAAC;;QACJ,CAAC;QAEM,qDAAyB,GAAhC,UAAiC,QAAiC;YAChE,IAAI,gBAAgB,GAAG,QAAQ,CAAC,UAAU,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,sBAAsB,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;YAE3H,EAAE,CAAC,CAAC,gBAAgB,KAAK,SAAS;gBAChC,gBAAgB,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;gBAChD,IAAI,CAAC,QAAQ,CAAC;oBACZ,aAAa,EAAE,gBAAgB;iBAChC,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAEM,kCAAM,GAAb;YACQ,IAAA,8BAAQ,CAAgB;YAC1B,IAAA,eAGwB,EAHtB,oCAAe,EACnB,sBAAQ,EACR,kDAAsB,EACtB,4BAAW,CAAgB;YAE7B,iFAAiF;YACjF,0BAA0B;YAC1B,IAAI,UAAU,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC/C,IAAI,aAAa,GAAG,eAAe,KAAK,SAAS;gBAC/C,oBAAC,2BAA2B,uBACrB,IAAI,CAAC,KAAK,IACf,KAAK,EAAG,UAAU,EAClB,OAAO,EAAG,IAAI,CAAC,cAAc,EAC7B,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAC9B,iBAAiB,EAAG,IAAI,CAAC,kBAAkB,EAC3C,aAAa,EAAG,eAAe,CAAC,aAAa;wBAC3C,eAAe,CAAC,aAAa;wBAC7B,EAAE,QAAQ,EAAE,aAAa,EAAE,IAC7B;gBACF,oBAAC,qBAAqB,uBACf,IAAI,CAAC,KAAK,IACf,aAAa,EAAG,IAAI,CAAC,cAAc,IACnC,CAAC;YAEL,MAAM,CAAC,CACL,6BACE,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EACxC,SAAS,EAAG,eAAG,CAAC,6BAA6B,EAAE,MAAM,CAAC,OAAO,CAAC,IAC5D,aAAa,CACX,CAAC,CAAC;QACZ,CAAC;QAED;;;;;WAKG;QACK,6CAAiB,GAAzB,UAA0B,KAAoC,EAAE,UAAkB;YAChF,IAAI,aAAa,GAAG,qBAAS,CAAC,KAAK,EAAE,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,IAAI,CAAC,EAAE,KAAK,UAAU,CAAC,EAAxB,CAAwB,CAAC,CAAC,CAAC;YACzE,MAAM,CAAC,aAAa,IAAI,CAAC,GAAG,aAAa,GAAG,SAAS,CAAC;QACxD,CAAC;QAED;;;;;WAKG;QACK,kDAAsB,GAA9B;YACQ,IAAA,wCAAa,CAAgB;YAC/B,IAAA,eAGU,EAFZ,kDAAsB,EACtB,oDAAuB,CACV;YAEf,oDAAoD;YACpD,iDAAiD;YACjD,EAAE,CAAC,CAAC,uBAAuB,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC3D,IAAI,qBAAqB,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;gBAClE,EAAE,CAAC,CAAC,qBAAqB,CAAC,IAAI,KAAK,mDAAyB,CAAC,IAAI,CAAC,CAAC,CAAC;oBAClE,MAAM,CAAC,qBAAqB,CAAC,KAAK,CAAC;gBACrC,CAAC;YACH,CAAC;YAED,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;QAED;;;;WAIG;QAEK,0CAAc,GAAtB,UAAuB,KAAoC;YAEzD,8CAA8C;YAC9C,IAAI,QAAQ,GAAkB,EAAE,CAAC;YAEjC,6EAA6E;YAC7E,+EAA+E;YAC/E,OAAO;YACP,IAAI,iBAAiB,GAAG,CAAC,CAAC,CAAC;YAE3B,0DAA0D;YAC1D,kDAAkD;YAClD,4DAA4D;YAC5D,6DAA6D;YAC7D,iEAAiE;YACjE,IAAI,4BAA4B,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe;gBAC3D,IAAI,CAAC,gCAAgC,EAAE,GAAG,SAAS,CAAC;YAEtD,mFAAmF;YACnF,IAAI,gBAAgB,GAAG,CAAC,4BAA4B,IAAI,4BAA4B,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEjG,IAAI,OAAO,GAAG,gBAAgB,GAAG,4BAA4B,CAAC,MAAM,GAAG,SAAS,CAAC;YAEjF,2FAA2F;YAC3F,IAAI,oBAAoB,GAAG,CAAC,4BAA4B,IAAI,qBAAS,CAAC,4BAA4B,EAAE,UAAC,cAAc,IAAK,OAAA,CAAC,cAAc,CAAC,IAAI,KAAK,mDAAyB,CAAC,QAAQ,IAAI,cAAc,CAAC,mBAAmB,CAAC,EAAlG,CAAkG,CAAC,CAAC,CAAC;YAE7N,qEAAqE;YACrE,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,OAAO,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;gBAC5B,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;gBACxB,IAAI,QAAQ,GAAG,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,4BAA4B,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC;gBAC5G,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBAClB,KAAK,mDAAyB,CAAC,OAAO;wBACpC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC3C,KAAK,CAAC;oBACR,KAAK,mDAAyB,CAAC,MAAM;wBACnC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;wBACxC,KAAK,CAAC;oBACR,KAAK,mDAAyB,CAAC,IAAI;wBAEjC,6CAA6C;wBAC7C,8CAA8C;wBAC9C,iDAAiD;wBACjD,wDAAwD;wBACxD,IAAI,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;wBAEnE,sCAAsC;wBACtC,iBAAiB,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBAEnE,8BAA8B;wBAC9B,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAC5C,UAAU,EACV,QAAQ,EACR,OAAO,CAAC,CAAC,CAAC;wBACZ,KAAK,CAAC;oBACR;wBAEE,oDAAoD;wBACpD,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;4BAEzB,6EAA6E;4BAC7E,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;gCAC7B,IAAI,CAAC,mBAAmB,wBACnB,IAAI,CAAC,mBAAmB,IAC3B,SAAS,uBAAO,IAAI,CAAC,mBAAmB,CAAC,SAAS,IAAE,SAAS,EAAE,MAAM,CAAC,IAAI,MAC3E,CAAC;4BACJ,CAAC;4BAAC,IAAI,CAAC,CAAC;gCAEN,6EAA6E;gCAC7E,4EAA4E;gCAC5E,IAAI,CAAC,mBAAmB,wBAAQ,IAAI,CAAC,mBAAmB,IAAE,SAAS,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,CAAC,IAAI,EAAE,GAAE,CAAC;4BAC5H,CAAC;wBACH,CAAC;wBACD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;gBAC/D,CAAC;gBAED,yEAAyE;gBACzE,qCAAqC;gBACrC,KAAK,IAAI,iBAAiB,GAAG,CAAC,GAAG,iBAAiB,GAAG,CAAC,CAAC;gBACvD,iBAAiB,GAAG,CAAC,CAAC,CAAC;YACzB,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC;QAED;;;;;;WAMG;QACK,uDAA2B,GAAnC,UAAoC,KAAoC,EAAE,QAAiB,EAAE,OAAgB;YAC3G,MAAM,CAAC,CACL,oBAAC,WAAI,IACH,GAAG,EAAG,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,OAAO,EACtC,KAAK,EAAG,KAAK,EACb,WAAW,EAAG,IAAI,CAAC,KAAK,CAAC,WAAW,EACpC,YAAY,EAAG,IAAI,CAAC,aAAa,EACjC,aAAa,EAAG,QAAQ,EACxB,OAAO,EAAG,OAAO,GACjB,CACH,CAAC;QACJ,CAAC;QAED;;;;;WAKG;QACK,6CAAiB,GAAzB,UAA0B,4BAA2D,EAAE,MAAc;YAEnG,iFAAiF;YACjF,IAAI,KAAK,GAAG,qBAAS,CAAC,4BAA4B,EAAE,UAAC,cAAc,IAAK,OAAA,CAAC,cAAc,CAAC,EAAE,KAAK,MAAM,CAAC,EAA9B,CAA8B,CAAC,CAAC;YAExG,MAAM,CAAC,KAAK,GAAG,CAAC,GAAG,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;QAC3C,CAAC;QAED;;;;;;WAMG;QACK,oDAAwB,GAAhC,UAAiC,KAAoC;YACnE,IAAI,oBAAoB,GAAG,qBAAS,CAAC,KAAK,EAAE,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,mDAAyB,CAAC,IAAI,EAA5C,CAA4C,CAAC,CAAC,CAAC;YAEpG,+EAA+E;YAC/E,EAAE,CAAC,CAAC,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YAED,4CAA4C;YAC5C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,EAAE,oBAAoB,CAAC,CAAC;QAC1D,CAAC;QAED;;;WAGG;QACK,4DAAgC,GAAxC;YAEE,iDAAiD;YACjD,yDAAyD;YACzD,6DAA6D;YAC7D,8CAA8C;YAC9C,MAAM,CAAC,CACL,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAO,MAAM,sBAAM,IAAI,IAAE,KAAK,OAAA,IAAG,CAAC,CAAC,CAAC;iBACnF,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,IAAI,CAAC,IAAI,KAAK,mDAAyB,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,mDAAyB,CAAC,QAAQ,CAAC,EAAlG,CAAkG,CAAC;iBAClH,MAAM,CAAC,UAAC,IAAI,EAAE,aAAa,EAAE,KAAK;gBACjC,MAAM,CAAC,CACL,aAAa,KAAK,CAAC;oBACnB,IAAI,CAAC,IAAI,KAAK,mDAAyB,CAAC,QAAQ;oBAChD,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CACpD,CAAC;YACJ,CAAC,CAAC,CAAC,CAAC;QACV,CAAC;QAED;;;;WAIG;QACK,4CAAgB,GAAxB,UAAyB,IAAiC;YACxD,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QACxE,CAAC;QAED;;;;WAIG;QACK,yCAAa,GAArB,UAAsB,IAAiC;YACrD,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACrE,CAAC;QAED;;;;;;WAMG;QACK,kDAAsB,GAA9B,UAA+B,IAAiC,EAAE,IAAY,EAAE,SAAiB;YAC/F,MAAM,CAAC,6BACL,IAAI,EAAG,IAAI,EACX,GAAG,EAAG,IAAI,CAAC,EAAE,EACb,SAAS,EAAG,SAAS,IAEnB,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CACtB,CAAC;QACT,CAAC;QAED;;;;;;WAMG;QAEK,yCAAa,GAArB,UAAsB,IAAiC,EAAE,QAAiB,EAAE,OAAgB;YAC1F,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;YAClB,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,KAAK,mDAAyB,CAAC,IAAI,CAAC;YAC1D,IAAI,WAAW,CAAC;YAEhB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,WAAW,GAAG;oBACZ,SAAS,EAAE,MAAM,CAAC,IAAI;oBACtB,OAAO,EAAE,IAAI,CAAC,YAAY;oBAC1B,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa;oBACjC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa;oBACjC,IAAI,EAAE,UAAU;oBAChB,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa;iBACxC,CAAC;YACJ,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,WAAW,GAAG;oBACZ,QAAQ,EAAE,QAAQ,IAAI,QAAQ;oBAC9B,OAAO,EAAE,OAAO,IAAI,OAAO;oBAC3B,SAAS,EAAE,MAAM,CAAC,IAAI;oBACtB,OAAO,EAAE,IAAI,CAAC,gBAAgB;oBAC9B,OAAO,EAAE,IAAI,CAAC,0BAA0B;oBACxC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,UAAU,GAAG,QAAQ;iBACzD,CAAC;YACJ,CAAC;YAED,MAAM,CAAC,CACL,oBAAC,uBAAuB,qBACtB,IAAI,EAAG,IAAI,EACX,EAAE,EAAG,IAAI,CAAC,GAAG,EACb,GAAG,EAAG,EAAE,GAAG,IAAI,CAAC,EAAE,EAClB,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAC/C,SAAS,EAAG,IAAI,CAAC,KAAK,CAAC,SAAS,IAC3B,WAAW,EAChB,CACH,CAAC;QACJ,CAAC;QAED;;;WAGG;QAEK,wCAAY,GAApB,UAAqB,IAAiC;YACpD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzC,MAAM,CAAC;YACT,CAAC;YAED,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAEvB,iDAAiD;YACjD,sBAAsB;YACtB,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;gBACrD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;oBAC9B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBACjD,CAAC;gBAED,IAAI,CAAC,QAAQ,CAAC;oBACZ,aAAa,EAAE,KAAK;oBACpB,QAAQ,EAAE,KAAK;iBAChB,CAAC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;gBAE9C,qDAAqD;gBACrD,sBAAsB;gBACtB,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;gBAEnG,IAAI,CAAC,QAAQ,CAAC;oBACZ,aAAa,EAAE,SAAS;oBACxB,QAAQ,EAAE,KAAK;iBAChB,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAED;;;WAGG;QAEK,4CAAgB,GAAxB,UAAyB,IAAiC;YACxD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzC,MAAM,CAAC;YACT,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACnC,CAAC;YAED,4CAA4C;YAC5C,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;YAExE,IAAI,CAAC,QAAQ,CAAC;gBACZ,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;QACL,CAAC;QAED;;;WAGG;QACK,wCAAY,GAApB,UAAqB,SAAoD;YACvE,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;gBACzB,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACb,QAAQ,EAAE,CAAC;gBACb,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED;;;;WAIG;QAEK,sDAA0B,GAAlC,UAAmC,EAAW,EAAE,KAAc;YAC5D,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;QAChD,CAAC;QAED;;WAEG;QAEK,0CAAc,GAAtB;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC;YACT,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC;gBACZ,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;aAC7D,CAAC,CAAC;QACL,CAAC;QAED;;;WAGG;QAEK,8CAAkB,GAA1B;YACE,MAAM,CAAC,CACL,oBAAC,iBAAO,IACN,aAAa,EAAG,KAAK,EACrB,QAAQ,EAAG,CAAC,EACZ,UAAU,EAAG,KAAK,EAClB,IAAI,EAAG,MAAM,EACb,eAAe,EAAG,gCAAe,CAAC,cAAc,EAChD,SAAS,EAAG,eAAG,CAAC,0BAA0B,EAAE,MAAM,CAAC,0BAA0B,CAAC,EAC9E,aAAa,EAAG,IAAI,CAAC,cAAc,EACnC,SAAS,EAAG,IAAI,CAAC,UAAU,EAC3B,eAAe,EAAG,IAAI;gBACtB,oBAAC,qBAAqB,uBACf,IAAI,CAAC,KAAK,IACf,aAAa,EAAG,IAAI,CAAC,cAAc,IACnC,CACM,CACX,CAAC;QACJ,CAAC;QAED;;WAEG;QAEK,sCAAU,GAAlB;YACE,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;YAExE,IAAI,CAAC,QAAQ,CAAC;gBACZ,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;QACL,CAAC;QACH,wBAAC;IAAD,CApeA,AAoeC,CApesC,yBAAa;IAEpC,8BAAY,GAAG;QAC3B,SAAS,EAAE,QAAQ;QACnB,yBAAyB,EAAE,KAAK;QAChC,QAAQ,EAAE,KAAK;KAChB,CAAC;IAwGF;QADC,oBAAQ;2DAoFR;IAwHD;QADC,oBAAQ;0DAoCR;IAOD;QADC,oBAAQ;yDA8BR;IAOD;QADC,oBAAQ;6DAgBR;IAoBD;QADC,oBAAQ;uEAGR;IAMD;QADC,oBAAQ;2DAaR;IAOD;QADC,oBAAQ;+DAmBR;IAMD;QADC,oBAAQ;uDAOR;IAneU,8CAAiB;IAugB9B;QAA0C,uDAAmC;QAA7E;;QA0CA,CAAC;QApCQ,4CAAM,GAAb;YACM,IAAA,eAQU,EAPZ,gBAAK,EACL,sBAAQ,EACR,sBAAQ,EACR,oBAAO,EACP,wCAAiB,EACjB,gCAAa,EACb,oCAAe,CACF;YACf,MAAM,CAAC,CACL;gBACE,oBAAC,sBAAa,uBACP,eAAe,IACpB,KAAK,EAAG,EAAE,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,EACjC,SAAS,EACP,eAAG,CAAC,4BAA4B,EAC9B;wBACE,aAAa,EAAE,QAAQ;qBACxB,CACF,EAEH,OAAO,EAAG,OAAO,mBACD,IAAI,mBACJ,CAAC,QAAQ,IAAI,QAAQ,EACrC,QAAQ,EAAG,QAAQ,EACnB,aAAa,EAAG,aAAa;wBAC3B,aAAa;wBACb,EAAE,QAAQ,EAAE,aAAa,EAAE,IAC7B;gBACA,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC;oBACvB,iBAAiB,EAAE,CAEjB,CACP,CAAC;QACJ,CAAC;QACH,kCAAC;IAAD,CA1CA,AA0CC,CA1CyC,yBAAa;IACvC,wCAAY,GAAG;QAC3B,QAAQ,EAAE,KAAK;QACf,QAAQ,EAAE,KAAK;KAChB,CAAC;IA8CJ;QAAoC,iDAA8C;QAAlF;;QAgBA,CAAC;QAfQ,sCAAM,GAAb;YACM,IAAA,eAIU,EAHZ,kDAAsB,EACtB,4BAAW,EACX,gCAAa,CACA;YACf,MAAM,CAAC,CACL,oBAAC,qBAAS,IACR,oBAAoB,EAAG,IAAI,EAC3B,SAAS,EAAG,eAAG,CAAC,mCAAmC,EAAE,MAAM,CAAC,0BAA0B,CAAC,IAErF,aAAa,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAO,MAAM,sBAAM,IAAI,IAAE,KAAK,OAAA,IAAG,CAAC,CAAC,CAAC,CAAC,CAClF,CACb,CAAC;QACJ,CAAC;QACH,4BAAC;IAAD,CAhBA,AAgBC,CAhBmC,yBAAa,GAgBhD","file":"components/SwatchColorPicker/SwatchColorPicker.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  autobind,\r\n  BaseComponent,\r\n  css,\r\n  findIndex,\r\n  getId\r\n} from '../../Utilities';\r\nimport {\r\n  ISwatchColorPickerProps,\r\n  ISwatchColorPickerItemProps,\r\n  SwatchColorPickerItemType\r\n} from './SwatchColorPicker.Props';\r\nimport { DirectionalHint } from '../../ContextualMenu';\r\nimport { getColorFromString } from '../../utilities/color/colors';\r\nimport { Grid } from '../../utilities/grid/Grid';\r\nimport { DefaultButton, CommandButton, IButtonProps } from '../../Button';\r\nimport { Callout } from '../../Callout';\r\nimport { FocusZone } from '../../FocusZone';\r\nimport * as stylesImport from './SwatchColorPicker.scss';\r\nconst styles: any = stylesImport;\r\n\r\ninterface ISwatchColorPickerOptionProps {\r\n\r\n  /**\r\n   * The option that will be made available to the user\r\n   */\r\n  item: ISwatchColorPickerItemProps;\r\n\r\n  /**\r\n   * Arbitrary unique string associated with this option\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Optional, the position in the parent set for this item\r\n   */\r\n  posInSet?: number;\r\n\r\n  /**\r\n   * Optional, the size of the total parent set\r\n   */\r\n  setSize?: number;\r\n\r\n  /**\r\n   * Optional, if the this option should be diabled\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Optional, the currently selectedIndex in the set of options\r\n   */\r\n  selectedIndex?: number;\r\n\r\n  /**\r\n   * The on click handler\r\n   */\r\n  onClick: (item: ISwatchColorPickerItemProps) => void;\r\n\r\n  /**\r\n   * Optional, the onHover handler\r\n   */\r\n  onHover?: (id?: string, color?: string) => void;\r\n\r\n  /**\r\n   * Optional, the onFocus handler\r\n   */\r\n  onFocus?: (id?: string, color?: string) => void;\r\n\r\n  /**\r\n   * The accessible role for this option\r\n   */\r\n  role?: string;\r\n\r\n  /**\r\n   * Optional, className(s) to apply\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * The shape for the option (only used for item type.Cell)\r\n   */\r\n  cellShape?: 'circle' | 'square';\r\n}\r\n\r\nconst SwatchColorPickerOption: React.StatelessComponent<ISwatchColorPickerOptionProps> =\r\n  (props: ISwatchColorPickerOptionProps) => {\r\n    let {\r\n      item,\r\n      id,\r\n      posInSet,\r\n      setSize,\r\n      className,\r\n      role,\r\n      selectedIndex,\r\n      disabled,\r\n      cellShape,\r\n      onClick,\r\n      onHover,\r\n      onFocus\r\n    } = props;\r\n    return (\r\n      <CommandButton\r\n        { ...item.menuItemButtonProps }\r\n        id={ id + '-item' + item.index }\r\n        data-index={ item.index }\r\n        data-is-focusable={ true }\r\n        aria-posinset={ posInSet && posInSet }\r\n        aria-setsize={ setSize && setSize }\r\n        disabled={ disabled }\r\n        className={ css(className,\r\n          {\r\n            ['is-selected ' + styles.cellIsSelected]: (selectedIndex && selectedIndex === item.index),\r\n            ['is-disabled ' + styles.disabled]: disabled\r\n          }\r\n        ) }\r\n        onClick={ _onClick }\r\n        onMouseEnter={ _onMouseEnter }\r\n        onMouseLeave={ _onMouseLeave }\r\n        onFocus={ _onFocus }\r\n        role={ role }\r\n        aria-selected={ selectedIndex && (selectedIndex === item.index).toString() }\r\n        ariaLabel={ item.label && item.label }\r\n        title={ item.label && item.label }\r\n      >\r\n        { _onRenderOption() }\r\n      </CommandButton>\r\n    );\r\n\r\n    function _onClick() {\r\n      if (onClick && !disabled) {\r\n        onClick(item);\r\n      }\r\n    }\r\n\r\n    function _onMouseEnter() {\r\n      if (onHover && !disabled) {\r\n        onHover(item.id, item.color);\r\n      }\r\n    }\r\n\r\n    function _onMouseLeave() {\r\n      if (onHover && !disabled) {\r\n        onHover();\r\n      }\r\n    }\r\n\r\n    function _onFocus() {\r\n      if (onFocus && !disabled) {\r\n        onFocus(item.id, item.color);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Render the core of an cell or menu item\r\n     * @returns {JSX.Element} - Element representing the core of the item\r\n     */\r\n    function _onRenderOption(): JSX.Element {\r\n\r\n      // Menu items just need their label text\r\n      if (item.type !== SwatchColorPickerItemType.Cell) {\r\n        return <span className={ styles.menuItem } >{ item.label }</span>;\r\n      }\r\n\r\n      // Build an SVG for the cell with the given shape and color properties\r\n      return (\r\n        <svg className={ css(styles.svg, cellShape, cellShape === 'circle' ? styles.circle : '') } viewBox='0 0 20 20' fill={ getColorFromString(item.color).str } >\r\n          {\r\n            cellShape === 'circle' ?\r\n              <circle cx='50%' cy='50%' r='50%' /> :\r\n              <rect width='100%' height='100%' />\r\n          }\r\n        </svg>\r\n      );\r\n    }\r\n  };\r\n\r\nexport interface ISwatchColorPickerState {\r\n  selectedIndex?: number;\r\n  expanded?: boolean;\r\n}\r\n\r\nexport class SwatchColorPicker extends BaseComponent<ISwatchColorPickerProps, ISwatchColorPickerState> {\r\n\r\n  public static defaultProps = {\r\n    cellShape: 'circle',\r\n    updateButtonIconWithColor: false,\r\n    disabled: false\r\n  };\r\n\r\n  private _id: string;\r\n\r\n  private _buttonWrapper: HTMLDivElement;\r\n\r\n  constructor(props: ISwatchColorPickerProps) {\r\n    super(props);\r\n\r\n    this._id = props.id || getId('swatchColorPicker');\r\n\r\n    this.state = {\r\n      selectedIndex: props.selectedId && this._getSelectedIndex(props.swatchColorPickerItems, props.selectedId),\r\n      expanded: false\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: ISwatchColorPickerProps) {\r\n    let newSelectedIndex = newProps.selectedId && this._getSelectedIndex(newProps.swatchColorPickerItems, newProps.selectedId);\r\n\r\n    if (newSelectedIndex !== undefined &&\r\n      newSelectedIndex !== this.state.selectedIndex) {\r\n      this.setState({\r\n        selectedIndex: newSelectedIndex\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let { expanded } = this.state;\r\n    let { menuButtonProps,\r\n      disabled,\r\n      swatchColorPickerItems,\r\n      columnCount } = this.props;\r\n\r\n    // If we got button props, put the swatch color picker behind a button, otherwise\r\n    // render all of the items\r\n    let colorToSet = this._getSelectedColorToSet();\r\n    let renderElement = menuButtonProps !== undefined ?\r\n      <SwatchColorPickerMenuButton\r\n        { ...this.props }\r\n        color={ colorToSet }\r\n        onClick={ this._onButtonClick }\r\n        expanded={ this.state.expanded }\r\n        onRenderContainer={ this._onRenderContainer }\r\n        menuIconProps={ menuButtonProps.menuIconProps ?\r\n          menuButtonProps.menuIconProps :\r\n          { iconName: 'chevronDown' } }\r\n      /> :\r\n      <SwatchColorPickerBody\r\n        { ...this.props }\r\n        onRenderItems={ this._onRenderItems }\r\n      />;\r\n\r\n    return (\r\n      <div\r\n        ref={ this._resolveRef('_buttonWrapper') }\r\n        className={ css('ms-swatchColorPickerWrapper', styles.wrapper) }>\r\n        { renderElement }\r\n      </div>);\r\n  }\r\n\r\n  /**\r\n   * Get the selected item's index\r\n   * @param items - The items to search\r\n   * @param selectedId - The selected item's id to find\r\n   * @returns {number} - The index of the selected item's id, -1 if there was no match\r\n   */\r\n  private _getSelectedIndex(items: ISwatchColorPickerItemProps[], selectedId: string): number | undefined {\r\n    let selectedIndex = findIndex(items, (item => (item.id === selectedId)));\r\n    return selectedIndex >= 0 ? selectedIndex : undefined;\r\n  }\r\n\r\n  /**\r\n   * Gets the color for the selected index\r\n   * @returns {string} - The color for the selected index,\r\n   *   or undefined if: we are not updating the button icon with color,\r\n   *   there is not a valid selected index, or if we do not have a valid color\r\n   */\r\n  private _getSelectedColorToSet(): string | undefined {\r\n    let { selectedIndex } = this.state;\r\n    let {\r\n      swatchColorPickerItems,\r\n      setSelectedColorForIcon\r\n    } = this.props;\r\n\r\n    // Do we need to update the button with the selected\r\n    // item's color? If so, attempt to grab the color\r\n    if (setSelectedColorForIcon && selectedIndex !== undefined) {\r\n      let swatchColorPickerItem = swatchColorPickerItems[selectedIndex];\r\n      if (swatchColorPickerItem.type === SwatchColorPickerItemType.Cell) {\r\n        return swatchColorPickerItem.color;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Render all the items\r\n   * @param items - The swatch color picker items\r\n   * @returns {JSX.Element[]} - An array of all the items in the swatch color picker\r\n   */\r\n  @autobind\r\n  private _onRenderItems(items: ISwatchColorPickerItemProps[]): JSX.Element[] {\r\n\r\n    // This holds all of the element for the items\r\n    let elements: JSX.Element[] = [];\r\n\r\n    // The number of cells that were processed in the previous iteration of loop.\r\n    // This will be used to increase the index to the item after the last processed\r\n    // item\r\n    let numOfItemsInChunk = -1;\r\n\r\n    // If we have cell items and we are in a menu, get all the\r\n    // first executable items per chunk. Note, in this\r\n    // context each menuItem is in its own \"chunk\", only grouped\r\n    // cells are processed as a chunk. This helps with being able\r\n    // to determine the correct aria-posinset and aria-setsize values\r\n    let firstExecutableItemsPerChunk = this.props.menuButtonProps ?\r\n      this._getFirstExecutableItemsPerChunk() : undefined;\r\n\r\n    // Did we find any executable items? (e.g. should be calculate the set information)\r\n    let shouldGetSetInfo = (firstExecutableItemsPerChunk && firstExecutableItemsPerChunk.length > 0);\r\n\r\n    let setSize = shouldGetSetInfo ? firstExecutableItemsPerChunk.length : undefined;\r\n\r\n    // If any menuItem has an icon, all menu items need to be positined correctly so they align\r\n    let shouldAccountForIcon = (firstExecutableItemsPerChunk && findIndex(firstExecutableItemsPerChunk, (executableItem) => (executableItem.type === SwatchColorPickerItemType.MenuItem && executableItem.menuItemButtonProps)));\r\n\r\n    // Loop across the items processing them depending on their item type\r\n    let index = 0;\r\n    while (index < items.length) {\r\n      let item = items[index];\r\n      let posInSet = shouldGetSetInfo ? this._getPositionInSet(firstExecutableItemsPerChunk, item.id) : undefined;\r\n      switch (item.type) {\r\n        case SwatchColorPickerItemType.Divider:\r\n          elements.push(this._renderSeparator(item));\r\n          break;\r\n        case SwatchColorPickerItemType.Header:\r\n          elements.push(this._renderHeader(item));\r\n          break;\r\n        case SwatchColorPickerItemType.Cell:\r\n\r\n          // build all the cells in the chunk this cell\r\n          // exists within (this will process all of the\r\n          // consecutive cells until the next non-cell type\r\n          // is incountered (or if we reach the end of the items))\r\n          let chunkItems = this._getNextChunkOfCellItems(items.slice(index));\r\n\r\n          // Update the number of items in chunk\r\n          numOfItemsInChunk = chunkItems.length > 0 ? chunkItems.length : -1;\r\n\r\n          // Add the result to the array\r\n          elements.push(this._renderNextChunkOfCellItems(\r\n            chunkItems,\r\n            posInSet,\r\n            setSize));\r\n          break;\r\n        default:\r\n\r\n          // Does at least one of the menu items have an icon?\r\n          if (shouldAccountForIcon) {\r\n\r\n            // Make sure the width styling is the same by applying a consistent className\r\n            if (item.menuItemButtonProps) {\r\n              item.menuItemButtonProps = {\r\n                ...item.menuItemButtonProps,\r\n                iconProps: { ...item.menuItemButtonProps.iconProps, className: styles.icon }\r\n              };\r\n            } else {\r\n\r\n              // This menu item didn't have an icon so add a \"spacer\" icon to make the text\r\n              // content align. This aligns with how ContextualMenu achieves this alignmet\r\n              item.menuItemButtonProps = { ...item.menuItemButtonProps, iconProps: { iconName: 'customIcon', className: styles.icon } };\r\n            }\r\n          }\r\n          elements.push(this._renderOption(item, posInSet, setSize));\r\n      }\r\n\r\n      // Increase the index by the number of items in the just processed chunk,\r\n      // otherwise just increment the index\r\n      index += numOfItemsInChunk > 0 ? numOfItemsInChunk : 1;\r\n      numOfItemsInChunk = -1;\r\n    }\r\n\r\n    return elements;\r\n  }\r\n\r\n  /**\r\n   * Renders the next consecutive chunk of cells\r\n   * @param items - The items to process\r\n   * @param posInSet - Optional, the position in the set for this chunk\r\n   * @param setSize - Optional, the size of the total set\r\n   * @returns {JSX.Element} - The grid that represents the chunk\r\n   */\r\n  private _renderNextChunkOfCellItems(items: ISwatchColorPickerItemProps[], posInSet?: number, setSize?: number): JSX.Element {\r\n    return (\r\n      <Grid\r\n        key={ this._id + items[0].id + '-grid' }\r\n        items={ items }\r\n        columnCount={ this.props.columnCount }\r\n        onRenderItem={ this._renderOption }\r\n        positionInSet={ posInSet }\r\n        setSize={ setSize }\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the position in set for the given id\r\n   * @param firstExecutableItemsPerChunk - The list of fist executable items per chunk\r\n   * @param itemId - The id of item to find the index of\r\n   * @returns {number} - The position in the set\r\n   */\r\n  private _getPositionInSet(firstExecutableItemsPerChunk: ISwatchColorPickerItemProps[], itemId: string): number | undefined {\r\n\r\n    // Find the index of the given id in the list of first executable items per chunk\r\n    let index = findIndex(firstExecutableItemsPerChunk, (executableItem) => (executableItem.id === itemId));\r\n\r\n    return index < 0 ? undefined : index + 1;\r\n  }\r\n\r\n  /**\r\n   * Gets the next chunk of consecutive cells starting a index zero.\r\n   * Note, index zero should be of type cell\r\n   * @param items - The list of items to process where index zero is the start of the chunk\r\n   * @returns {ISwatchColorPickerItemProps[]} - the array of consecutive cells starting at index zero\r\n   *   (and continuing to the first non-cell type or the end of the items)\r\n   */\r\n  private _getNextChunkOfCellItems(items: ISwatchColorPickerItemProps[]): ISwatchColorPickerItemProps[] {\r\n    let nextIndextAfterChunk = findIndex(items, (item => item.type !== SwatchColorPickerItemType.Cell));\r\n\r\n    // If we didn't find a non-cell item, we need to handle everything that is left\r\n    if (nextIndextAfterChunk < 0) {\r\n      return items;\r\n    }\r\n\r\n    // If we get here we found our chunk boundry\r\n    return items.slice(0 /* start */, nextIndextAfterChunk);\r\n  }\r\n\r\n  /**\r\n   * Get only the executable items (cells and menuItems)\r\n   * @returns {ISwatchColorPickerItemProps[]} - an array of the executable items\r\n   */\r\n  private _getFirstExecutableItemsPerChunk(): ISwatchColorPickerItemProps[] {\r\n\r\n    // Make sure every item has an index, then filter\r\n    // the results so that you only get the executable items,\r\n    // finally filter those items down to just the items that are\r\n    // either the start of a chunk or an menu item\r\n    return (\r\n      this.props.swatchColorPickerItems.map((item, index) => { return { ...item, index }; })\r\n        .filter(item => (item.type === SwatchColorPickerItemType.Cell || item.type === SwatchColorPickerItemType.MenuItem))\r\n        .filter((item, filteredIndex, items) => {\r\n          return (\r\n            filteredIndex === 0 ||\r\n            item.type === SwatchColorPickerItemType.MenuItem ||\r\n            (item.index - items[filteredIndex - 1].index !== 1)\r\n          );\r\n        }));\r\n  }\r\n\r\n  /**\r\n   * Render the separator\r\n   * @param item - The divider item to get the data to render from\r\n   * @returns {JSX.Element} - Element that represents the separator\r\n   */\r\n  private _renderSeparator(item: ISwatchColorPickerItemProps): JSX.Element {\r\n    return this._renderHeaderOrDivider(item, 'separator', styles.divider);\r\n  }\r\n\r\n  /**\r\n   * Render the header\r\n   * @param item - The header item to get the data to render from\r\n   * @returns {JSX.Element} - Element that represents the header\r\n   */\r\n  private _renderHeader(item: ISwatchColorPickerItemProps): JSX.Element {\r\n    return this._renderHeaderOrDivider(item, 'heading', styles.header);\r\n  }\r\n\r\n  /**\r\n   * Handle the rendering of the header/divider\r\n   * @param item - The item to get the data to render from\r\n   * @param role - The role of the element\r\n   * @param className - the className to use\r\n   * @returns {JSX.Element} - Element that represents the header\r\n   */\r\n  private _renderHeaderOrDivider(item: ISwatchColorPickerItemProps, role: string, className: string): JSX.Element {\r\n    return <div\r\n      role={ role }\r\n      key={ item.id }\r\n      className={ className }\r\n    >\r\n      { item.label && item.label }\r\n    </div>;\r\n  }\r\n\r\n  /**\r\n   * Render a cell or menu item\r\n   * @param item - The item to render\r\n   * @param posInSet - Optional, the position in the set of the item\r\n   * @param setSize - Optional, the total set size this item is in\r\n   * @returns {JSX.Element} - Element representing the item\r\n   */\r\n  @autobind\r\n  private _renderOption(item: ISwatchColorPickerItemProps, posInSet?: number, setSize?: number): JSX.Element {\r\n    let id = this._id;\r\n    let isCell = item.type === SwatchColorPickerItemType.Cell;\r\n    let optionProps;\r\n\r\n    if (isCell) {\r\n      optionProps = {\r\n        className: styles.cell,\r\n        onClick: this._onCellClick,\r\n        onHover: this.props.onCellHovered,\r\n        onFocus: this.props.onCellFocused,\r\n        role: 'gridcell',\r\n        selectedIndex: this.state.selectedIndex\r\n      };\r\n    } else {\r\n      optionProps = {\r\n        posInSet: posInSet && posInSet,\r\n        setSize: setSize && setSize,\r\n        className: styles.item,\r\n        onClick: this._onMenuItemClick,\r\n        onFocus: this._clearFocusColorOnMenuItem,\r\n        role: this.props.menuButtonProps ? 'menuitem' : 'button'\r\n      };\r\n    }\r\n\r\n    return (\r\n      <SwatchColorPickerOption\r\n        item={ item }\r\n        id={ this._id }\r\n        key={ id + item.id }\r\n        disabled={ this.props.disabled || item.disabled }\r\n        cellShape={ this.props.cellShape }\r\n        { ...optionProps }\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle the click on a cell\r\n   * @param item - The cell that the click was fired against\r\n   */\r\n  @autobind\r\n  private _onCellClick(item: ISwatchColorPickerItemProps) {\r\n    if (this.props.disabled || item.disabled) {\r\n      return;\r\n    }\r\n\r\n    let index = item.index;\r\n\r\n    // If we have a valid index and it is not already\r\n    // selected, select it\r\n    if (index >= 0 && index !== this.state.selectedIndex) {\r\n      if (this.props.onColorChanged) {\r\n        this.props.onColorChanged(item.id, item.color);\r\n      }\r\n\r\n      this.setState({\r\n        selectedIndex: index,\r\n        expanded: false\r\n      });\r\n    } else if (index === this.state.selectedIndex) {\r\n\r\n      // The index that got the click was already selected,\r\n      // clear the selection\r\n      this._clearColors([this.props.onColorChanged, this.props.onCellHovered, this.props.onCellFocused]);\r\n\r\n      this.setState({\r\n        selectedIndex: undefined,\r\n        expanded: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the click on a menu item\r\n   * @param item - The menu item that the click was fired against\r\n   */\r\n  @autobind\r\n  private _onMenuItemClick(item: ISwatchColorPickerItemProps) {\r\n    if (this.props.disabled || item.disabled) {\r\n      return;\r\n    }\r\n\r\n    if (this.props.onMenuItemClick) {\r\n      this.props.onMenuItemClick(item);\r\n    }\r\n\r\n    // Make sure to clear any hover/focus colors\r\n    this._clearColors([this.props.onCellHovered, this.props.onCellFocused]);\r\n\r\n    this.setState({\r\n      expanded: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the colors by calling the given callbacks\r\n   * @param callbacks - The callbacks to handle the clear operation\r\n   */\r\n  private _clearColors(callbacks: ((id?: string, color?: string) => void)[]) {\r\n    callbacks.forEach((callback) => {\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the focus color\r\n   * @param id - The id of the item\r\n   * @param color - The color for the item\r\n   */\r\n  @autobind\r\n  private _clearFocusColorOnMenuItem(id?: string, color?: string) {\r\n    this._clearColors([this.props.onCellFocused]);\r\n  }\r\n\r\n  /**\r\n   * onClick Handler for the button\r\n   */\r\n  @autobind\r\n  private _onButtonClick() {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.expanded) {\r\n      this._onDismiss();\r\n    }\r\n\r\n    this.setState({\r\n      expanded: this.props.disabled ? false : !this.state.expanded\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Render the menu (callout) for when the swatch color picker\r\n   * is behind a button and is expanded\r\n   */\r\n  @autobind\r\n  private _onRenderContainer() {\r\n    return (\r\n      <Callout\r\n        isBeakVisible={ false }\r\n        gapSpace={ 0 }\r\n        doNotLayer={ false }\r\n        role={ 'menu' }\r\n        directionalHint={ DirectionalHint.bottomLeftEdge }\r\n        className={ css('ms-swatchColorPickerMenu', styles.swatchColorPickerContainer) }\r\n        targetElement={ this._buttonWrapper }\r\n        onDismiss={ this._onDismiss }\r\n        setInitialFocus={ true }>\r\n        <SwatchColorPickerBody\r\n          { ...this.props }\r\n          onRenderItems={ this._onRenderItems }\r\n        />\r\n      </Callout>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle dismissing the menu\r\n   */\r\n  @autobind\r\n  private _onDismiss() {\r\n    this._clearColors([this.props.onCellHovered, this.props.onCellFocused]);\r\n\r\n    this.setState({\r\n      expanded: false\r\n    });\r\n  }\r\n}\r\n\r\ninterface IMenuButtonProps extends IButtonProps {\r\n  /**\r\n   * The CSS-compatible string to describe the color to set\r\n   * for the button\r\n   */\r\n  color?: string;\r\n\r\n  /**\r\n   * Is the menuButton expanded?\r\n   */\r\n  expanded: boolean;\r\n\r\n  /**\r\n   * Is the menuButton disabled>\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * OnClick handler\r\n   */\r\n  onClick: () => void;\r\n\r\n  /**\r\n   * Callback for rendering the expanded container\r\n   */\r\n  onRenderContainer: () => JSX.Element;\r\n\r\n  /**\r\n   * Optional, ButtonProps for the menuButton\r\n   */\r\n  menuButtonProps?: IButtonProps;\r\n}\r\n\r\nclass SwatchColorPickerMenuButton extends BaseComponent<IMenuButtonProps, {}> {\r\n  public static defaultProps = {\r\n    expanded: false,\r\n    disabled: false\r\n  };\r\n\r\n  public render() {\r\n    let {\r\n      color,\r\n      expanded,\r\n      disabled,\r\n      onClick,\r\n      onRenderContainer,\r\n      menuIconProps,\r\n      menuButtonProps\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <DefaultButton\r\n          { ...menuButtonProps }\r\n          style={ { color: color && color } }\r\n          className={\r\n            css('ms-swatchColorPickerButton',\r\n              {\r\n                'is-expanded': expanded\r\n              }\r\n            )\r\n          }\r\n          onClick={ onClick }\r\n          aria-haspopup={ true }\r\n          aria-expanded={ !disabled && expanded }\r\n          disabled={ disabled }\r\n          menuIconProps={ menuIconProps ?\r\n            menuIconProps :\r\n            { iconName: 'chevronDown' } }\r\n        />\r\n        { (!disabled && expanded) &&\r\n          onRenderContainer()\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface ISwatchColorPickerBodyProps {\r\n  swatchColorPickerItems: ISwatchColorPickerItemProps[];\r\n  columnCount: number;\r\n  onRenderItems: (items: ISwatchColorPickerItemProps[]) => JSX.Element[];\r\n}\r\n\r\nclass SwatchColorPickerBody extends BaseComponent<ISwatchColorPickerBodyProps, {}> {\r\n  public render() {\r\n    let {\r\n      swatchColorPickerItems,\r\n      columnCount,\r\n      onRenderItems\r\n    } = this.props;\r\n    return (\r\n      <FocusZone\r\n        isCircularNavigation={ true }\r\n        className={ css('ms-swatchColorPickerBodyContainer', styles.swatchColorPickerContainer) }\r\n      >\r\n        { onRenderItems(swatchColorPickerItems.map((item, index) => { return { ...item, index }; })) }\r\n      </FocusZone>\r\n    );\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}