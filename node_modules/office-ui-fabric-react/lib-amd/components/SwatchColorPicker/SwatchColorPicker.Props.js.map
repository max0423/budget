{"version":3,"sources":["components/SwatchColorPicker/SwatchColorPicker.Props.ts"],"names":[],"mappings":";;;IAgHA,IAAY,yBAKX;IALD,WAAY,yBAAyB;QACnC,yEAAQ,CAAA;QACR,iFAAY,CAAA;QACZ,+EAAW,CAAA;QACX,6EAAU,CAAA;IACZ,CAAC,EALW,yBAAyB,GAAzB,iCAAyB,KAAzB,iCAAyB,QAKpC","file":"components/SwatchColorPicker/SwatchColorPicker.Props.js","sourcesContent":["import { IButtonProps } from '../../Button';\r\n\r\nexport interface ISwatchColorPickerProps {\r\n\r\n  /**\r\n   * the number of columns for the swatch color picker\r\n   */\r\n  columnCount: number;\r\n\r\n  /**\r\n   * The id for the swatch color picker\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * The shape of the color cells, defaults to circle\r\n   */\r\n  cellShape?: 'circle' | 'square';\r\n\r\n  /**\r\n   * The id of color cell that is currently selected\r\n   */\r\n  selectedId?: string;\r\n\r\n  /**\r\n   * IButtonProps for the swatch color picker. If given the swatch color picker\r\n   * will render inside of a menu\r\n   */\r\n  menuButtonProps?: IButtonProps;\r\n\r\n  /**\r\n   * Should the icon color be updated to align\r\n   * with the selected color? Default is false\r\n   */\r\n  setSelectedColorForIcon?: boolean;\r\n\r\n  /**\r\n   * The color options that will be made available to the user\r\n   */\r\n  swatchColorPickerItems: ISwatchColorPickerItemProps[];\r\n\r\n  /**\r\n   * Callback issued when the user changes the color.\r\n   * Note, if no id or color is given, there is no selected cell\r\n   * (e.g. the user executed the currently selected cell to unselect it)\r\n   */\r\n  onColorChanged?: (id?: string, color?: string) => void;\r\n\r\n  /**\r\n * Callback issued when the user click a menu item\r\n */\r\n  onMenuItemClick?: (item: ISwatchColorPickerItemProps) => void;\r\n\r\n  /**\r\n   * Callback issued when the user hovers over a color cell.\r\n   * Note, if no id or color is given, cells are not longer being hovered\r\n   */\r\n  onCellHovered?: (id?: string, color?: string) => void;\r\n\r\n  /**\r\n   * Callback issued when the user focuses a color cell.\r\n   * Note, if no id or color is given, cells are not longer being focused\r\n   */\r\n  onCellFocused?: (id?: string, color?: string) => void;\r\n\r\n  /**\r\n   * Is this swatch color picker disabled?\r\n   */\r\n  disabled?: boolean;\r\n}\r\n\r\nexport interface ISwatchColorPickerItemProps {\r\n\r\n  /**\r\n   * Arbitrary unique string associated with this option\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The label for this item.\r\n   * Visible text if this item is a header,\r\n   * tooltip if is this item is normal\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * The type of item this is\r\n   */\r\n  type: SwatchColorPickerItemType;\r\n\r\n  /**\r\n   * The CSS-compatible string to describe the color\r\n   */\r\n  color?: string;\r\n\r\n  /**\r\n   * Index for this option\r\n   */\r\n  index?: number;\r\n\r\n  /**\r\n   * The menu item button props. This value is only used if\r\n   * the type is MenuItem\r\n   */\r\n  menuItemButtonProps?: IButtonProps;\r\n\r\n  /**\r\n   * Is this individual item disabled?\r\n   */\r\n  disabled?: boolean;\r\n}\r\n\r\nexport enum SwatchColorPickerItemType {\r\n  Cell = 0,\r\n  MenuItem = 1,\r\n  Divider = 2,\r\n  Header = 3\r\n}"],"sourceRoot":"..\\..\\..\\src"}