/// <reference path="../typings/tsd.d.ts" />
/// <reference path="./FsPromise.d.ts" />
var fs = require("fs-extra");
var modulePromise = require("es6-promise");
var Promise = modulePromise.Promise;
var FsPromise = (function () {
    function FsPromise() {
    }
    FsPromise.prototype.copy = function (src, dest, filter) {
        return this.getFsPromise("copy", [src, dest, filter].filter(function (arg) { return !!arg; }));
    };
    FsPromise.prototype.copySync = function (src, dest, filter) {
        fs.copySync(src, dest, filter);
    };
    FsPromise.prototype.createFile = function (file) {
        return this.getFsPromise("createFile", [file]);
    };
    FsPromise.prototype.createFileSync = function (file) {
        fs.createFileSync(file);
    };
    FsPromise.prototype.mkdirs = function (dir) {
        return this.getFsPromise("mkdirs", [dir]);
    };
    FsPromise.prototype.mkdirsSync = function (dir) {
        fs.mkdirsSync(dir);
    };
    FsPromise.prototype.outputFile = function (file, data) {
        return this.getFsPromise("outputFile", [file, data]);
    };
    FsPromise.prototype.outputFileSync = function (file, data) {
        fs.outputFileSync(file, data);
    };
    FsPromise.prototype.outputJSON = function (file, data) {
        return this.getFsPromise("outputJSON", [file, data]);
    };
    FsPromise.prototype.outputJSONSync = function (file, data) {
        fs.outputJSONSync(file, data);
    };
    FsPromise.prototype.readJSON = function (file, options) {
        return this.getFsPromise("readJSON", [file, options]);
    };
    FsPromise.prototype.readJSONSync = function (file, options) {
        return fs.readJSONSync(file, options);
    };
    FsPromise.prototype.remove = function (dir) {
        return this.getFsPromise("remove", [dir]);
    };
    FsPromise.prototype.removeSync = function (dir) {
        fs.removeSync(dir);
    };
    FsPromise.prototype.writeJSON = function (file, object, options) {
        return this.getFsPromise("writeJSON", [file, object, options]);
    };
    FsPromise.prototype.writeJSONSync = function (file, object, options) {
        fs.writeJSONSync(file, object, options);
    };
    FsPromise.prototype.rename = function (oldPath, newPath) {
        return this.getFsPromise("rename", [oldPath, newPath]);
    };
    FsPromise.prototype.renameSync = function (oldPath, newPath) {
        fs.renameSync(oldPath, newPath);
    };
    FsPromise.prototype.truncate = function (fd, len) {
        return this.getFsPromise("truncate", [fd, len]);
    };
    FsPromise.prototype.truncateSync = function (fd, len) {
        fs.truncateSync(fd, len);
    };
    FsPromise.prototype.chown = function (path, uid, gid) {
        return this.getFsPromise("chown", [path, uid, gid]);
    };
    FsPromise.prototype.chownSync = function (path, uid, gid) {
        fs.chownSync(path, uid, gid);
    };
    FsPromise.prototype.fchown = function (fd, uid, gid) {
        return this.getFsPromise("fchown", [fd, uid, gid]);
    };
    FsPromise.prototype.fchownSync = function (fd, uid, gid) {
        fs.fchownSync(fd, uid, gid);
    };
    FsPromise.prototype.lchown = function (path, uid, gid) {
        return this.getFsPromise("lchown", [path, uid, gid]);
    };
    FsPromise.prototype.lchownSync = function (path, uid, gid) {
        fs.lchownSync(path, uid, gid);
    };
    FsPromise.prototype.chmodSync = function (path, mode) {
        fs.chmodSync(path, mode);
    };
    FsPromise.prototype.fchmod = function (fd, mode) {
        return this.getFsPromise("fchmod", [fd, mode]);
    };
    FsPromise.prototype.fchmodSync = function (fd, mode) {
        fs.fchmodSync(fd, mode);
    };
    FsPromise.prototype.lchmod = function (path, mode) {
        return this.getFsPromise("lchmod", [path, mode]);
    };
    FsPromise.prototype.lchmodSync = function (path, mode) {
        fs.lchmodSync(path, mode);
    };
    FsPromise.prototype.stat = function (path) {
        return this.getFsPromise("stat", [path]);
    };
    FsPromise.prototype.statSync = function (path) {
        return fs.statSync(path);
    };
    FsPromise.prototype.readFile = function (path, encoding) {
        return this.getFsPromise("readFile", [path, encoding]);
    };
    FsPromise.prototype.readFileSync = function (filename, encoding) {
        return fs.readFileSync(filename, encoding);
    };
    FsPromise.prototype.writeFile = function (filename, data, encoding) {
        return this.getFsPromise("writeFile", [filename, data, encoding]);
    };
    FsPromise.prototype.writeFileSync = function (filename, data, encoding) {
        fs.writeFileSync(filename, data, encoding);
    };
    FsPromise.prototype.readdir = function (path) {
        return this.getFsPromise("readdir", [path]);
    };
    FsPromise.prototype.readdirSync = function (path) {
        return fs.readdirSync(path);
    };
    FsPromise.prototype.getFsPromise = function (method, args) {
        return new Promise(function (resolve, reject) {
            var callback = function (err, data) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(data || true);
                }
            };
            args.push(callback);
            fs[method].apply(fs, args);
        });
    };
    return FsPromise;
})();
module.exports = FsPromise;
//# sourceMappingURL=FsPromise.js.map